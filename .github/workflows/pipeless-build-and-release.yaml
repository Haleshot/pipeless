name: Rust Build & Release

on:
  push:
    branches:
      - main
    paths:
      - 'Cargo.toml'
  workflow_dispatch:

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Get before and after versions
      id: check_version
      run: |
        before_version=$(git describe --abbrev=0 --tags | grep -oP '\d+\.\d+\.\d+')
        after_version=$(cargo metadata --manifest-path pipeless/Cargo.toml --format-version 1 | jq -r '.packages[] | select(.name == "pipeless").version')

        if [ "$before_version" != "$after_version" ]; then
          echo "Cargo.toml version has been updated"
          echo "version_updated=true" >> $GITHUB_OUTPUT
          echo "new_version=${after_version}" >> $GITHUB_OUTPUT
        else
          echo "No changes to Cargo.toml version"
          echo "version_updated=false" >> $GITHUB_OUTPUT
        fi

    - name: Install latest rust toolchain
      if: steps.check_version.outputs.version_updated == 'true'
      uses: actions-rs/toolchain@v1
      with:
        toolchain: beta
        default: true
        override: true

    - name: Install system dependencies
      if: steps.check_version.outputs.version_updated == 'true'
      run: |
        sudo apt-get update \
        && sudo apt-get install -y \
        libunwind-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
        libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base \
        gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
        gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-tools \
        gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 \
        gstreamer1.0-qt5 gstreamer1.0-pulseaudio

    - name: Build
      if: steps.check_version.outputs.version_updated == 'true'
      run: |
        cargo build --all --release --manifest-path pipeless/Cargo.toml  &&
        strip pipeless/target/release/pipeless &&
        tar -czf pipeless-${{ steps.check_version.outputs.new_version }}-${{ runner.os }}-${{ runner.arch }}.tar.gz pipeless/target/release/pipeless $(find pipeless/target/release/ -maxdepth 1  -name "libonnxruntime*")

    - name: Create tag
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Build Action"
        git tag -a v${{ steps.check_version.outputs.new_version }} -m "Version ${{ steps.check_version.outputs.new_version }}"

    - name: Push tag
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Build Action"
        git push origin v${{ steps.check_version.outputs.new_version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.check_version.outputs.new_version }}
        files: pipeless-${{ steps.check_version.outputs.new_version }}-${{ runner.os }}-${{ runner.arch }}.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}